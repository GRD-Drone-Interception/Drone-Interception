//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/DronePodiumInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DronePodiumInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DronePodiumInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DronePodiumInputActions"",
    ""maps"": [
        {
            ""name"": ""DronePodium"",
            ""id"": ""078d3b0f-23f4-401e-8e2a-27792d2eb452"",
            ""actions"": [
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""02d2d7c0-1e74-4e90-9476-b8c0682cf275"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""f0b94092-50f0-4a26-9517-f0dc90339049"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2c67e66e-8a6f-43a0-9d03-2c80f7aac2af"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c1ce4d6-94de-46ce-b7ac-c7bb34f7bff5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DronePodium
        m_DronePodium = asset.FindActionMap("DronePodium", throwIfNotFound: true);
        m_DronePodium_RotateLeft = m_DronePodium.FindAction("RotateLeft", throwIfNotFound: true);
        m_DronePodium_RotateRight = m_DronePodium.FindAction("RotateRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DronePodium
    private readonly InputActionMap m_DronePodium;
    private IDronePodiumActions m_DronePodiumActionsCallbackInterface;
    private readonly InputAction m_DronePodium_RotateLeft;
    private readonly InputAction m_DronePodium_RotateRight;
    public struct DronePodiumActions
    {
        private @DronePodiumInputActions m_Wrapper;
        public DronePodiumActions(@DronePodiumInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateLeft => m_Wrapper.m_DronePodium_RotateLeft;
        public InputAction @RotateRight => m_Wrapper.m_DronePodium_RotateRight;
        public InputActionMap Get() { return m_Wrapper.m_DronePodium; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DronePodiumActions set) { return set.Get(); }
        public void SetCallbacks(IDronePodiumActions instance)
        {
            if (m_Wrapper.m_DronePodiumActionsCallbackInterface != null)
            {
                @RotateLeft.started -= m_Wrapper.m_DronePodiumActionsCallbackInterface.OnRotateLeft;
                @RotateLeft.performed -= m_Wrapper.m_DronePodiumActionsCallbackInterface.OnRotateLeft;
                @RotateLeft.canceled -= m_Wrapper.m_DronePodiumActionsCallbackInterface.OnRotateLeft;
                @RotateRight.started -= m_Wrapper.m_DronePodiumActionsCallbackInterface.OnRotateRight;
                @RotateRight.performed -= m_Wrapper.m_DronePodiumActionsCallbackInterface.OnRotateRight;
                @RotateRight.canceled -= m_Wrapper.m_DronePodiumActionsCallbackInterface.OnRotateRight;
            }
            m_Wrapper.m_DronePodiumActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RotateLeft.started += instance.OnRotateLeft;
                @RotateLeft.performed += instance.OnRotateLeft;
                @RotateLeft.canceled += instance.OnRotateLeft;
                @RotateRight.started += instance.OnRotateRight;
                @RotateRight.performed += instance.OnRotateRight;
                @RotateRight.canceled += instance.OnRotateRight;
            }
        }
    }
    public DronePodiumActions @DronePodium => new DronePodiumActions(this);
    public interface IDronePodiumActions
    {
        void OnRotateLeft(InputAction.CallbackContext context);
        void OnRotateRight(InputAction.CallbackContext context);
    }
}
