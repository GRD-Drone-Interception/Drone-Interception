//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input Actions/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""UnitDeployment"",
            ""id"": ""74f18e1e-ad9e-4530-b684-b35eb735f2b9"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""6a1bef8a-df11-4236-bfb8-21c8265eca6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""39e581ff-f8d1-4d57-ad49-88099a2746e0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Game"",
            ""id"": ""2171b908-c26e-472a-9b6c-f7d1eb020c44"",
            ""actions"": [
                {
                    ""name"": ""GameSpace"",
                    ""type"": ""Button"",
                    ""id"": ""6e4dec0f-33e3-4318-bc8a-5006f127bfaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5d8c791f-e452-49bf-b87b-5d2b807dab7f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GameSpace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map"",
            ""id"": ""79f004b4-2719-449b-b8a9-a86ae4c67f4f"",
            ""actions"": [
                {
                    ""name"": ""MapSpace"",
                    ""type"": ""Button"",
                    ""id"": ""8d42a070-5d30-4bdb-8f07-b4f3523171af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1036eb43-1d37-4933-ae82-7ca096d519de"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapSpace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UnitDeployment
        m_UnitDeployment = asset.FindActionMap("UnitDeployment", throwIfNotFound: true);
        m_UnitDeployment_Newaction = m_UnitDeployment.FindAction("New action", throwIfNotFound: true);
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_GameSpace = m_Game.FindAction("GameSpace", throwIfNotFound: true);
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_MapSpace = m_Map.FindAction("MapSpace", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UnitDeployment
    private readonly InputActionMap m_UnitDeployment;
    private IUnitDeploymentActions m_UnitDeploymentActionsCallbackInterface;
    private readonly InputAction m_UnitDeployment_Newaction;
    public struct UnitDeploymentActions
    {
        private @InputActions m_Wrapper;
        public UnitDeploymentActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UnitDeployment_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UnitDeployment; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitDeploymentActions set) { return set.Get(); }
        public void SetCallbacks(IUnitDeploymentActions instance)
        {
            if (m_Wrapper.m_UnitDeploymentActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_UnitDeploymentActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_UnitDeploymentActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_UnitDeploymentActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_UnitDeploymentActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public UnitDeploymentActions @UnitDeployment => new UnitDeploymentActions(this);

    // Game
    private readonly InputActionMap m_Game;
    private IGameActions m_GameActionsCallbackInterface;
    private readonly InputAction m_Game_GameSpace;
    public struct GameActions
    {
        private @InputActions m_Wrapper;
        public GameActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @GameSpace => m_Wrapper.m_Game_GameSpace;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void SetCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterface != null)
            {
                @GameSpace.started -= m_Wrapper.m_GameActionsCallbackInterface.OnGameSpace;
                @GameSpace.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnGameSpace;
                @GameSpace.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnGameSpace;
            }
            m_Wrapper.m_GameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GameSpace.started += instance.OnGameSpace;
                @GameSpace.performed += instance.OnGameSpace;
                @GameSpace.canceled += instance.OnGameSpace;
            }
        }
    }
    public GameActions @Game => new GameActions(this);

    // Map
    private readonly InputActionMap m_Map;
    private IMapActions m_MapActionsCallbackInterface;
    private readonly InputAction m_Map_MapSpace;
    public struct MapActions
    {
        private @InputActions m_Wrapper;
        public MapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MapSpace => m_Wrapper.m_Map_MapSpace;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void SetCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterface != null)
            {
                @MapSpace.started -= m_Wrapper.m_MapActionsCallbackInterface.OnMapSpace;
                @MapSpace.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnMapSpace;
                @MapSpace.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnMapSpace;
            }
            m_Wrapper.m_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MapSpace.started += instance.OnMapSpace;
                @MapSpace.performed += instance.OnMapSpace;
                @MapSpace.canceled += instance.OnMapSpace;
            }
        }
    }
    public MapActions @Map => new MapActions(this);
    public interface IUnitDeploymentActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IGameActions
    {
        void OnGameSpace(InputAction.CallbackContext context);
    }
    public interface IMapActions
    {
        void OnMapSpace(InputAction.CallbackContext context);
    }
}
